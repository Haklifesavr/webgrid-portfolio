body {
    margin: 0;
    padding: 0;
    box-sizing: border-box !important;
    font-family: 'Montserrat', sans-serif;
}
.img1 {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

.br {
    border-radius: 6px;
}
.br2 {
    border: 1px solid !important;
}
a {
    text-decoration: none;
    color: #0000EE;
    :visited {
        color: #551A8B;
    }
}
.FooterLink {
    color: #0000EE;
    cursor: pointer;
    // :visited { color: #551A8B; }
}
.swiper-slide,
.swiper-slide-active {
    width: 200px !important;
}
.filter {
    filter: invert(1);
}
.icon {
    width: 130px !important;
    height: 130px !important;
}

.ball {
    width: 20px;
    height: 20px;
    position: fixed;
    top: 0;
    left: 0;
    border: 3px solid #0092ff;
    border-radius: 50%;
    pointer-events: none;
    z-index: 24124124;
}
.t25o0 {
    transform: translateY(25px);
    opacity: 0;
}
.logoImg {
    filter: invert(100%) sepia(1%) saturate(1%) hue-rotate(0) brightness(1209%) contrast(300%);
    height: 42px;
}
.small {
    height: 32px !important;

}
.fill:hover,
.fill:focus {
  box-shadow: inset 0 0 0 2em var(--hover);
}

// Animate the size, outside
.pulse:hover, 
.pulse:focus {
  animation: pulse 1s;
  box-shadow: 0 0 0 2em transparent;
}

@keyframes pulse {
  0% { box-shadow: 0 0 0 0 var(--hover); }
}

// Stack multiple shadows, one from the left, the other from the right
.close:hover,
.close:focus {
  box-shadow: 
    inset -3.5em 0 0 0 var(--hover),
    inset 3.5em 0 0 0 var(--hover);  
}

// Size can also be negative; see how it's smaller than the element
.raise:hover,
.raise:focus {
  box-shadow: 0 0.5em 0.5em -0.4em var(--hover);
  transform: translateY(-0.25em);
}

// Animating from the bottom
.up:hover,
.up:focus {
  box-shadow: inset 0 -3.25em 0 0 var(--hover);
}

// And from the left
.slide:hover,
.slide:focus {
  box-shadow: inset 6.5em 0 0 0 var(--hover);
}

// Multiple shadows, one on the outside, another on the inside
.offset {  
    padding: .75em 2.5em;
  box-shadow: 
    0.3em 0.3em 0 0 var(--color),
    inset 0.3em 0.3em 0 0 var(--color);
  
  &:hover,
  &:focus {
    box-shadow: 
      0 0 0 0 var(--hover),
      inset 6em 3.5em 0 0 var(--hover);
  }
}

//=== Set button colors
// If you wonder why use Sass vars or CSS custom properties...
  // Make a map with the class names and matching colors
$colors: (

  offset: #0092ff
);

// Sass variables compile to a static string; CSS variables are dynamic and inherited
  // Loop through the map and set CSS custom properties using Sass variables
@each $button, $color in $colors {
  .#{$button} {
    --color: #{$color};
    --hover: #0092ff;
  }
}

// Now every button will have different colors as set above. We get to use the same structure, only changing the custom properties.
button {  
  color: var(--color);
  transition: 0.25s;
  
  &:hover,
  &:focus { 
    border-color: var(--hover);
    color: #fff;
  }
}



// Basic button styles
button {
  background: none;
  border: 2px solid;
  font: inherit;
  line-height: 1;
  margin: 0.5em;
 
}


// .button {
//     font-family: 'Space Mono', monospace;
//     letter-spacing: 1px;
//     background: #0092ff;
//     color: white;
//     position: relative;
//     outline: none;
//     border: none;
//     height: 50px;
//     width: 190px;
//     font-size: 14px;
//     opacity: 0;
//     z-index: 2;
//     // transition: .01s .23s ease-out all;
//     transition: 0.4s ease-out all;
//     overflow: hidden;
//     &:before {
//         content: '';
//         position: absolute;
//         left: 0;
//         top: 0;
//         height: 100%;
//         width: 55%;
//         background: #0092ff;
//         z-index: -1;
//         transition: 0.3s ease-in all;
//     }
//     &:after {
//         content: '';
//         position: absolute;
//         left: -5%;
//         top: 5%;
//         height: 90%;
//         width: 5%;
//         background: white;
//         z-index: -1;
//         transition: 0.4s 0.02s ease-in all;
//     }
//     &:hover {
//         cursor: pointer;
//         color: transparent;
//         &:before {
//             left: 100%;
//             width: 25%;
//         }
//         &:after {
//             left: 100%;
//             width: 70%;
//         }
//         .icon-right.after:after {
//             left: -80px;
//             color: white;
//             transition: 0.2s 0.2s ease all;
//         }
//         .icon-right.after:before {
//             left: -104px;
//             top: 14px;
//             opacity: 0.2;
//             color: white;
//         }
//     }
// }

// .icon-right {
//     position: absolute;
//     top: 0;
//     right: 0;
//     &:after {
//         font-family: "FontAwesome";
//         content: '\2192';
//         font-size: 24px;
//         display: inline-block;
//         position: relative;
//         top: 23px;
//         margin-right: 4px;
//         transform: translate3D(0, -50%, 0);
//     }
//     &.after:after {
//         left: -250px;
//         color: black;
//         transition: 0.15s 0.25s ease left, 0.5s 0.05s ease color;
//     }
//     &.after:before {
//         content: 'Navigate';
//         position: absolute;
//         left: -230px;
//         top: 14px;
//         opacity: 0;
//         transition: 0.2s ease-in all;
//     }
// }

// .signature {
//     position: fixed;
//     font-family: sans-serif;
//     font-weight: 100;
//     bottom: 10px;
//     left: 0;
//     letter-spacing: 4px;
//     font-size: 10px;
//     width: 100vw;
//     text-align: center;
//     color: white;
//     text-transform: uppercase;
//     text-decoration: none;
// }
